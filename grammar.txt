PROGRAM ->          FDECLS DECLARATIONS STATEMENT_SEQ t_.				
FDECLS ->			FDEC t_; | FDEC t_; FDECLS						
FDEC ->             t_def TYPE FNAME t_( PARAMS t_) DECLARATIONS STATEMENT_SEQ t_fed
PARAMS ->           TYPE VAR | TYPE VAR t_, PARAMS           
FNAME ->            ID
DECLARATIONS ->     DECL t_; | DECL t_; DECLARATIONS 				

	


DECL ->             TYPE VARLIST
TYPE ->             t_kw_int | t_kw_double
VARLIST ->          VAR t_, VARLIST | VAR                      
STATEMENT_SEQ ->    STATEMENT | STATEMENT t_; STATEMENT_SEQ    // right recursion is fine??? no semicolon on last


														    // this thing...
STATEMENT ->        VAR = EXPR |
                        t_if BEXPR t_then STATEMENT_SEQ P_STREPLC t_fi |      
                        t_while BEXPR t_do STATEMENT_SEQ t_od |
                        t_print EXPR |
                        t_return EXPR

P_STREPLC ->		t_else STATEMENT_SEQ | e
   
EXPR ->				TERM P_EXPR
P_EXPR ->			t_+ TERM P_EXPR | t_- TERM P_EXPR | e


TERM ->				FACTOR P_TERM
P_TERM ->			t_* FACTOR P_TERM | t_/ FACTOR P_TERM | t_% FACTOR P_TERM | e



FACTOR ->     		VAR | NUMBER | t_( EXPR t_) | FNAME t_( EXPRSEQ t_)
EXPRSEQ -> 	  		EXPR t_, EXPRSEQ | EXPR


BEXPR ->    		BTERM P_BEXPR
P_BEXPR ->			t_or BTERM P_BEXPR | e

BTERM ->   		 	BFACTOR P_BTERM
P_BTERM ->			t_and BFACTOR P_BTERM | e


BFACTOR ->  	    t_( BEXPR t_) | t_not BFACTOR | t_( EXPR COMP EXPR t_)
COMP ->     		< | > | == | <= | >= | <>
VAR ->        	 	ID | ID[EXPR]
ID ->         		t_identifier
DOUBLE ->			NUMBER<'e'>NUMBER | DECIMAL<'e'>NUMBER | DECIMAL       
DECIMAL ->			NUMBER.POSNUMBER
NUMBER ->			t_num | -t_num
POSNUMBER ->		t_num




// space just means two symbols one after another

expr and term: you first make E start with TERM because its always gonna end as that, then keep doing operations

////////////NUMBER ->   		INTEGER | DOUBLE

200
-200
200.0
200.0e20
200e200
